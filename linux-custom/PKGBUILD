# $Id: PKGBUILD 130991 2011-07-09 12:23:51Z thomas $
# Maintainer: Tobias Powalowski <tpowa@archlinux.org>
# Maintainer: Thomas Baechler <thomas@archlinux.org>

pkgbase=linux
pkgname=('linux-custom' 'linux-custom-headers')
_kernelname=${pkgname#linux}
_basekernel=3.6.3
pkgver=${_basekernel}
pkgrel=1
arch=('i686' 'x86_64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=()
options=('!strip')
source=("linux-${_basekernel}.tar.gz"
        # the main kernel config files
        'config'
        # standard config files for mkinitcpio ramdisk
        "${pkgname}.preset"
        'change-default-console-loglevel.patch'
	'i915-initialize-cadl-in-opregion.patch'
	'0001-UBUNTU-SAUCE-AppArmor-Add-profile-introspection-file.patch')
md5sums=("$(md5sum "${source[0]}" | cut -d " " -f 1)"
         # custom config for faster builds
         '8adda7e080146a08075432829a6bebcb'
         # modified to skip fallback preset
         'bd73e0a2b3b80a220ab18a3c0c5fcc2a'
	 '9d3c56a4b999c8bfbd4018089a62f662'
	 '04d69ad98c81b359dcba7b3e7f500546'
	 '7c1864c1e53cf0d2e58dc0eb0d648ece')

build() {
  cd "${srcdir}/linux-${_basekernel}"

  # set DEFAULT_CONSOLE_LOGLEVEL to 4 (same value as the 'quiet' kernel param)
  # remove this when a Kconfig knob is made available by upstream
  # (relevant patch sent upstream: https://lkml.org/lkml/2011/7/26/227)
  patch -Np1 -i "${srcdir}/change-default-console-loglevel.patch"

  # Fix brightness hotkeys https://bugs.freedesktop.org/show_bug.cgi?id=45452
  patch -Np1 -i "${srcdir}/i915-initialize-cadl-in-opregion.patch"

  # Add "profiles" support to AppArmor so it can see what rules are loaded
  patch -Np1 -i "${srcdir}/0001-UBUNTU-SAUCE-AppArmor-Add-profile-introspection-file.patch"

  cat "${srcdir}/config" > ./.config

  if [ "${_kernelname}" != "" ]; then
    sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
  fi

  # set extraversion to pkgrel
  sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

  # get kernel version
  make prepare

  # load configuration
  # Configure the kernel. Replace the line below with one of your choice.
  #make menuconfig # CLI menu for configuration
  #make nconfig # new CLI menu for configuration
  #make xconfig # X-based configuration
  #make oldconfig # using old config from previous kernel version
  # ... or manually edit .config

  ####################
  # stop here
  # this is useful to configure the kernel
  #msg "Stopping build"
  #return 1
  ####################

  yes "" | make config

  # build!
  make ${MAKEFLAGS} bzImage modules
}

package_linux-custom() {
  pkgdesc="The Linux Kernel and modules"
  groups=('base')
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7')
  optdepends=('crda: to set the correct wireless channels of your country')
  backup=("etc/mkinitcpio.d/${pkgname}.preset")
  install=${pkgname}.install

  cd "${srcdir}/linux-${_basekernel}"

  KARCH=x86

  # get kernel version
  _kernver="$(make kernelrelease)"

  mkdir -p "${pkgdir}"/{usr/lib/{modules,firmware},boot}
  make INSTALL_MOD_PATH="${pkgdir}/usr" INSTALL_MOD_STRIP=1 modules_install
  cp arch/$KARCH/boot/bzImage "${pkgdir}/boot/vmlinuz-${pkgname}"

  # add vmlinux
  install -D -m644 vmlinux "${pkgdir}/usr/src/linux-${_kernver}/vmlinux"

  # install fallback mkinitcpio.conf file and preset file for kernel
  install -D -m644 "${srcdir}/${pkgname}.preset" "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"

  # set correct depmod command for install
  sed \
    -e  "s/KERNEL_NAME=.*/KERNEL_NAME=${_kernelname}/g" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
    -i "${startdir}/${pkgname}.install"
  sed \
    -e "s|ALL_kver=.*|ALL_kver=\"/boot/vmlinuz-${pkgname}\"|g" \
    -e "s|default_image=.*|default_image=\"/boot/initramfs-${pkgname}.img\"|g" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/initramfs-${pkgname}-fallback.img\"|g" \
    -i "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"

  # remove build and source links
  rm -f "${pkgdir}"/usr/lib/modules/${_kernver}/{source,build}
  # remove the firmware
  rm -rf "${pkgdir}/usr/lib/firmware"
  # gzip -9 all modules to save 100MB of space
  find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
  # make room for external modules
  ln -s "../extramodules-${_basekernel}${_kernelname:--ARCH}" "${pkgdir}/usr/lib/modules/${_kernver}/extramodules"
  # add real version for building modules and running depmod from post_install/upgrade
  mkdir -p "${pkgdir}/usr/lib/modules/extramodules-${_basekernel}${_kernelname:--ARCH}"
  echo "${_kernver}" > "${pkgdir}/usr/lib/modules/extramodules-${_basekernel}${_kernelname:--ARCH}/version"

  mv "$pkgdir/usr/lib" "$pkgdir/lib"
  # Now we call depmod...
  depmod -b "$pkgdir" -F System.map "$_kernver"
  mv "$pkgdir/lib" "$pkgdir/usr/lib"
}

package_linux-custom-headers() {
  pkgdesc="Header files and scripts for building modules for linux kernel"

  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}"

  cd "${srcdir}/linux-${_basekernel}"
  find . -name Makefile -o -name Kconfig\* -o -name \*.pl > "${srcdir}/hdrfiles"
  find arch/${KARCH}/include include scripts -type f >> "${srcdir}/hdrfiles"
  find .config Module.symvers -type f >> "${srcdir}/hdrfiles"
  tar -c -f - -T "${srcdir}/hdrfiles" | (cd "${pkgdir}/usr/src/linux-${_kernver}"; tar -xf -)
  cd "${pkgdir}/usr/lib/modules/${_kernver}"
  ln -sf ../../../src/linux-${_kernver} build

  # fix permissions on scripts dir
  chmod og-w -R "${pkgdir}/usr/src/linux-${_kernver}/scripts"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/.tmp_versions"

  chown -R root.root "${pkgdir}/usr/src/linux-${_kernver}"
  find "${pkgdir}/usr/src/linux-${_kernver}" -type d -exec chmod 755 {} \;

  # strip scripts directory
  find "${pkgdir}/usr/src/linux-${_kernver}/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
    case "$(file -bi "${binary}")" in
      *application/x-sharedlib*) # Libraries (.so)
        /usr/bin/strip ${STRIP_SHARED} "${binary}";;
      *application/x-archive*) # Libraries (.a)
        /usr/bin/strip ${STRIP_STATIC} "${binary}";;
      *application/x-executable*) # Binaries
        /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
    esac
  done

  # remove unneeded architectures
  cd "${pkgdir}/usr/src/linux-${_kernver}/arch"
  for dir in */; do
    [[ $dir == ${KARCH}/ ]] || rm -rf "$dir"
  done
}
